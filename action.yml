name: "Setup Shopware"
description: "Install Shopware with specific versions in your CI"
author: "shopware AG"
branding:
  color: "blue"
  icon: "download"
inputs:
  env:
    description: "Environment for Shopware"
    required: true
    default: "test"
  shopware-version:
    description: "Shopware Version to use"
    required: true
    default: "v6.5.7.4"
  shopware-repository:
    description: The shopware repository to checkout
    required: true
    default: shopware/shopware
  php-version:
    description: "PHP Version to use"
    required: true
    default: "8.2"
  php-extensions:
    description: "PHP extensions to install"
    required: true
    default: ""
  install:
    description: "Install Shopware"
    required: true
    default: "false"
  install-locale:
    description: "Locale to install"
    required: true
    default: "en-GB"
  install-currency:
    description: "Currency to install"
    required: true
    default: "EUR"
  keep-composer-tools:
    description: "Keep Shopware Composer tools (PHPStan, ECS, BC-Checker)"
    required: true
    default: "false"
  composer-options:
    description: "Additional composer options"
    required: false
    default: ""
  mysql-version:
    description: "MySQL Version to use"
    required: true
    default: "builtin"
  node-version:
    description: nodejs version to use
    required: false
    default: "20.x"
  installAdmin:
    description: Whether to install administration npm dependencies and prepare jest
    required: false
    default: ""
  installStorefront:
    description: Whether to install storefront npm dependencies
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Clone Shopware
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.shopware-repository }}
        ref: ${{ inputs.shopware-version }}

    - name: Remove vendor-bin
      if: inputs.keep-composer-tools == 'false'
      shell: bash
      run: rm -rf vendor-bin

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        extensions: ${{ inputs.php-extensions }}
        tools: symfony-cli

    - name: Start Default MySQL
      if: inputs.mysql-version == 'builtin'
      shell: bash
      run: |
        sudo mv /var/lib/mysql /var/lib/mysql-old
        sudo mkdir /var/lib/mysql
        sudo mount -t tmpfs tmpfs /var/lib/mysql -o size=1G
        sudo -u mysql mysqld --datadir=/var/lib/mysql --default-time-zone=SYSTEM --initialize-insecure
        sudo systemctl start mysql

    - name: Start External MySQL
      if: inputs.mysql-version != 'builtin' && inputs.mysql-version != 'skip'
      shell: bash
      run: |
        docker run \
          --name mysql \
          -p 3306:3306 \
          -e MYSQL_ALLOW_EMPTY_PASSWORD=yes \
          -e MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=yes \
          --tmpfs /var/lib/mysql:rw,size=1G \
          -d \
          ${{ inputs.mysql-version }}

    - uses: "ramsey/composer-install@v3"
      with:
        custom-cache-key: ${{ runner.os }}-setup-shopware-composer-${{ inputs.php-version }}-${{ hashFiles('composer.json', 'custom/plugins/**/composer.json') }}
        composer-options: ${{ inputs.composer-options }}

    - uses: actions/setup-node@v4
      if: inputs.installStorefront || inputs.installAdmin
      with:
        node-version: 20

    - name: Retrieve the cached "node_modules" directory (if present)
      uses: actions/cache@v4
      if: inputs.installStorefront
      id: storefront-node-cache
      with:
        path: src/Storefront/Resources/app/storefront/node_modules
        key: storefront-node-modules-${{ runner.os }}-${{ hashFiles('src/Storefront/Resources/app/storefront/package-lock.json') }}

    - name: Install dependencies (if the cached directory was not found)
      if: inputs.installStorefront && steps.storefront-node-cache.outputs.cache-hit != 'true'
      env:
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
      shell: bash
      run: npm --prefix src/Storefront/Resources/app/storefront ci --no-audit --prefer-offline

    - name: Retrieve the cached "node_modules" directory (if present)
      uses: actions/cache@v4
      if: inputs.installAdmin
      id: admin-node-cache
      with:
        path: src/Administration/Resources/app/administration/node_modules
        key: admin-node-modules-${{ runner.os }}-${{ hashFiles('src/Administration/Resources/app/administration/package-lock.json') }}

    - name: Install dependencies (if the cached directory was not found)
      if: inputs.installAdmin && steps.admin-node-cache.outputs.cache-hit != 'true'
      env:
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
      shell: bash
      run: npm --prefix src/Administration/Resources/app/administration ci --no-audit --prefer-offline

    - name: Prepare Jest environment
      if: ${{ inputs.installAdmin }}
      shell: bash
      working-directory: src/Administration/Resources/app/administration
      run: npm run unit-setup

    - name: Entity schema
      if: ${{ inputs.installAdmin }}
      shell: bash
      run: composer admin:generate-entity-schema-types

    - name: Configure MySQL Client
      if: inputs.mysql-version != 'builtin'
      shell: bash
      run: |
        echo "[client]" > $HOME/.my.cnf
        echo "host=127.0.0.1" > $HOME/.my.cnf
        echo "user=root" > $HOME/.my.cnf

    - name: Wait for MySQL
      if: inputs.mysql-version != 'builtin' && inputs.mysql-version != 'skip'
      shell: bash
      run: |
        if docker exec mysql mariadb --version; then
          while ! docker exec mysql mariadb-admin ping -h localhost --silent; do
            sleep 1
          done
        else
          while ! docker exec mysql mysqladmin ping -h localhost --silent; do
            sleep 1
          done
        fi

    - name: Setup Shopware Environment Variables
      shell: bash
      run: |
        echo "APP_ENV=${{ inputs.env }}" >> "$GITHUB_ENV"
        echo "APP_SECRET=def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48" >> "$GITHUB_ENV"
        echo "APP_URL=http://localhost:8000" >> "$GITHUB_ENV"
        echo "DATABASE_URL=mysql://root@127.0.0.1/shopware" >> "$GITHUB_ENV"

    - name: Install Shopware
      if: inputs.install == 'true'
      shell: bash
      run: bin/console system:install --create-database --drop-database --basic-setup --force --shop-locale=${{ inputs.install-locale }} --shop-currency=${{ inputs.install-currency }}

    - name: Start Webserver
      if: inputs.install == 'true' && inputs.env == 'e2e'
      shell: bash
      run: symfony server:start -d
